version: 2.1

orbs:
  python: circleci/python@0.2.1

jobs:
  build:
    docker:
     - image: circleci/python:latest
     - image: circleci/mysql:latest
       command: [--default-authentication-plugin=mysql_native_password]
       environment:
         #MYSQL_DATABASE: CSSS
         #MYSQL_USER: csssUser
         #MYSQL_PASSWORD: 1234
         #MYSQL_HOST: 127.0.0.1
         MYSQL_ROOT_PASSWORD: 1234
    working_directory: ~/repo
    steps:
      - checkout
      
      - run:
      # Our primary container isn't MYSQL so run a sleep command until it's ready.
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      
      - run:
          name: Install MySQL CLI; Create db
          command: |
            sudo apt-get install default-mysql-client
            mysql -h 127.0.0.1 -u csssUser -p1234 --execute="CREATE DATABASE test_CSSS"
      
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: Migrate database
          command: |
            . venv/bin/activate
            python manage.py makemigrations fileSystem
            python manage.py makemigrations users
            python manage.py makemigrations timetable
            python manage.py migrate
      
      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            python manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports
